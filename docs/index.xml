<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Adithya</title>
    <link>https://adithyaov.github.io/</link>
    <description>Recent content in Index on Adithya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2021 00:00:00 +0530</lastBuildDate><atom:link href="https://adithyaov.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design: Direct style parsers in streamly</title>
      <link>https://adithyaov.github.io/blog/direct-parser-design/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0530</pubDate>
      
      <guid>https://adithyaov.github.io/blog/direct-parser-design/</guid>
      <description>.language-haskell { color: #fff!important; }  The following article briefly describes the design of direct style parsers in streamly. We won&amp;rsquo;t bother with the implementation details but rather will try to see what a parser is.
Design The design of parsers is inspired by the design of terminating folds. Extend terminating folds with backtracing and error handling and voila, you get a parser.
A complete parsing workflow consists of the parser itself and driver that uses the parser on an input stream.</description>
    </item>
    
    <item>
      <title>Design: Direct style parsers in streamly</title>
      <link>https://adithyaov.github.io/posts/direct-parser-design/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0530</pubDate>
      
      <guid>https://adithyaov.github.io/posts/direct-parser-design/</guid>
      <description>.language-haskell { color: #fff!important; }  The following article briefly describes the design of direct style parsers in streamly. We won&amp;rsquo;t bother with the implementation details but rather will try to see what a parser is.
Design The design of parsers is inspired by the design of terminating folds. Extend terminating folds with backtracing and error handling and voila, you get a parser.
A complete parsing workflow consists of the parser itself and driver that uses the parser on an input stream.</description>
    </item>
    
  </channel>
</rss>
