{
    "version": "https://jsonfeed.org/version/1",
    "title": "Adithya",
    "description": "",
    "home_page_url": "https://adithyaov.github.io",
    "feed_url": "https://adithyaov.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Adithya Obilisetty"
    },
    "items": [
        {
            "id": "https://adithyaov.github.io/experimenting-with-acyclic-graphs-in-alga/",
            "url": "https://adithyaov.github.io/experimenting-with-acyclic-graphs-in-alga/",
            "title": "Acyclic graphs in Alga",
            "summary": "Alga is a library for algebraic construction and manipulation of graphs in Haskell. Seethis Haskell Symposium paper and thecorresponding talk for the motivationbehind the library, the underlying theory and implementation details. There is also aHaskell eXchange talk, and a tutorial by Alexandre Moine.Please visit the&hellip;",
            "content_html": "<p><strong>Alga</strong> is a library for algebraic construction and manipulation of graphs in Haskell. See\n<a href=\"https://github.com/snowleopard/alga-paper\">this Haskell Symposium paper</a> and the\ncorresponding <a href=\"https://www.youtube.com/watch?v=EdQGLewU-8k\">talk</a> for the motivation\nbehind the library, the underlying theory and implementation details. There is also a\n<a href=\"https://skillsmatter.com/skillscasts/10635-algebraic-graphs\">Haskell eXchange talk</a>, \nand a <a href=\"https://nobrakal.github.io/alga-tutorial\">tutorial</a> by Alexandre Moine.\nPlease visit the <a href=\"https://github.com/snowleopard/alga/wiki\">wiki</a> for more information.</p>\n<h1 id=\"motivation-behind-acyclic-graphs\">Motivation behind acyclic graphs</h1>\n<p>The basic idea is that the user should be able to use acyclic graphs without\nmany restrictions. Ideally the user should not be able to compile programs\nthat result in an acyclic graph. The avenue of a strict type safe acyclic graphs\nwas explored but due to the limitations of type system this was not possible.</p>\n<p>Acyclic graphs are both common and heavily used in dependency\nmanagement. This is demonstrated in the section \n<strong>Construction from algebraic graph and a partial order</strong> but unfortunately\neven this is removed from the final draft due to being unsafe.</p>\n<p>It would also makes it easier to work with algorithms like <code>scc</code> or <code>topSort</code>\nas has been remarked in <a href=\"https://github.com/snowleopard/alga/issues/152\">some</a>\n<a href=\"https://github.com/snowleopard/alga/issues/154\">issues</a>.</p>\n<h1 id=\"construction-methods\">Construction methods</h1>\n<p>Below are a few ways one could construct an acyclic graph. In the <a href=\"Acyclic.AdjacencyMap\">final draft</a>\nfew construction methods have been removed for being unsafe.</p>\n<h2 id=\"scc-algorithm\">SCC algorithm</h2>\n<p>One straightforward way to construct an acyclic graph was by using\nthe SCC algorithm. We all know that a graph of SCC is acyclic and\nhence can be used to construct acyclic graphs.</p>\n<p>The following is the signature for <code>scc</code> in Alga,</p>\n<pre><code>scc :: Ord a =&gt; AdjacencyMap a -&gt; Acyclic.AdjacencyMap (NonEmpty.AdjacencyMap a)</code></pre><h2 id=\"construction-from-algebraic-graph-and-a-partial-order\">Construction from algebraic graph and a partial order</h2>\n<p>The basic idea of this kind of construction is that if the edges are\nrestricted on the basis of ordering of the elements then it is\nimpossible to construct a back edge and hence it is impossible to\nconstruct an acyclic graph. This order can be visualized as somewhat\nsimilar to the topological sorting itself.</p>\n<pre><code>import Algebra.Graph (Graph)\n\ntype PartialOrder a = a -&gt; a -&gt; Bool\n\nfromGraph :: Ord a =&gt; PartialOrder a -&gt; Graph a -&gt; Acyclic.AdjacencyMap a</code></pre><p>Example (The following is similar to dependency management):</p>\n<p>Here is a simple example where we do have a partial order in advance:</p>\n<ul>\n<li>Every object file depends only on C source files: <code>file.c</code> &lt; <code>file.o</code>.</li>\n<li>Every executable depends only on object files: <code>file.o</code> &lt; <code>file.exe</code>.</li>\n</ul>\n<p>Here we could just use <code>&lt;</code> from the derived <code>Ord</code> instance for the extension data type:</p>\n<pre><code>data Extension = C | O | Exe deriving (Eq, Ord)\n\ntype File = (FilePath, Extension)\n\npartialOrder :: PartialOrder File\npartialOrder (_, x) (_, y) = x &lt; y</code></pre><p>The problem with this is the fact that the construction of the acyclic\ngraph is dependent on the partial order provided. One could potentially\nmake cyclic graphs given an improper partial order such as,\n<code>partialOrder _ _ = True</code>. It is not possible to restrict the user to\nuse a <strong>strict partial order</strong> and hence is removed from the <a href=\"https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap.hs\">final draft</a>.</p>\n<p>One could also create an evil <code>Ord</code> instance which might lead to the\ncreation of an inconsistent acyclic graph (or maybe even an\ninconsistent graph itself). This, being an extreme case, is ignored.</p>\n<h1 id=\"the-ord-module\">The Ord module</h1>\n<p><a href=\"https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap/Ord.hs\">Algebra.Graph.Acyclic.AdjacencyMap.Ord</a> is\ncreated for the completeness of <a href=\"https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap.hs\">Algebra.Graph.Acyclic.AdjacencyMap</a>.\nAs mentioned earlier, ease of use is an important motivation for the library.\nThe <code>Ord</code> module makes it easier to use acyclic graphs by providing operators like\n<code>connect</code>, <code>overlay</code>, etc.</p>\n<p>This module highly depends on the <code>Ord</code> instance of the vertices.\nEvery operation in this module makes sure that for any 2 vertices\n<code>x</code> and <code>y</code> in the graph, an edge can exist between <code>x</code> and <code>y</code> if\nand only if <code>x &lt; y</code>. This is similar to the partial order construction\nmethod but uses the <code>Ord</code> instance of the element itself.</p>\n<h1 id=\"the-shrink-operator\">The Shrink Operator</h1>\n<p>An amazing observation made by <a href=\"https://github.com/snowleopard\">Andrey Mokhov</a>\nwas that one can use <code>scc</code> to create a method of acyclic graph\nconstruction which is safe and complete.</p>\n<p>We can define <code>shrink</code> as,</p>\n<pre><code>shrink :: AdjacencyMap a -&gt; Acyclic.AdjacencyMap a\nshrink am = AAM (Map.map (NonEmpty.head . NonEmpty.vertexList1) aam)\n  where\n    AAM aam = scc am </code></pre><p>One could potentially replace <code>Ord</code> instance completely with <code>shrink</code>\noperations. This has been demonstrated in <a href=\"https://gist.github.com/adithyaov/bf3bf5d595bc1bb587d0aea03f1b3412\">this gist</a>.</p>\n<p>Unfortunately, with the current implementation of <code>shrink</code>,\nfew important mathematical properties will be broken. \nFor example, as Andrey Mokhov pointed out,</p>\n<p>If we define <code>x == y</code> as <code>shrink x == shrink y</code>.\nThen <code>edge 1 2 + edge 2 1 == vertex 1</code> but one cannot replace\n<code>vertex 1</code> with <code>edge 1 2</code> in an expression without changing its\nmeaning. Because <code>vertex 1 + edge 2 3</code> will suddenly become \n<code>edge 1 2 + edge 2 1 + edge 2 3</code> which is equal to <code>edge 1 3</code>.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Although the <code>Ord</code> module makes it easier to work with acyclic graphs,\nit is not complete.\n<code>shrink</code> is a beautiful and a powerful operator which provides a\nsafe and a complete way to construct acyclic graphs. But it cannot\nbe used with the current implementation due to its side effects\non basic algebraic properties. Coming up with a proper implementation\nof <code>shrink</code> would increase the usability and effectiveness of the\nlibrary. A proper implementation of <code>shrink</code> would replace the <code>Ord</code>\nmodule and many other functions completely.</p>\n",
            "author": {
                "name": "Adithya Obilisetty"
            },
            "tags": [
            ],
            "date_published": "2020-07-16T15:22:44+05:30",
            "date_modified": "2020-07-16T15:22:44+05:30"
        },
        {
            "id": "https://adithyaov.github.io/about-me/",
            "url": "https://adithyaov.github.io/about-me/",
            "title": "About me",
            "summary": "Hi, I’m Adithya. I currently work for a company called Composewell where I build tooling around the Haskell ecosystem. Before that, I studied Computer Science at Indian Institute of Technology, Palakkad. I am interested in Functional programming and Mathematics, hence I have a natural predilection&hellip;",
            "content_html": "<p>Hi, I’m Adithya. I currently work for a company called Composewell where I build tooling around the Haskell ecosystem. Before that, I studied Computer Science at <a href=\"https://iitpkd.ac.in/\">Indian Institute of Technology, Palakkad</a>.</p>\n<p>I am interested in Functional programming and Mathematics, hence I have a natural predilection towards Haskell. I contribute to the Open Source community whenever possible. I use Emacs for almost everything and prefer Z shell (with oh-my-zsh) over Bash.</p>\n<p>Apart from that, I regularly play chess, although I’m not very good at it.</p>\n<h1 id=\"research-interests\">Research Interests</h1>\n<p>My researches interests mostly lie in the field of math and programming languages. They include <em>Cryptography</em>, <em>Category Theory</em>, <em>Type Theory</em> and <em>Proof Assistants</em>.</p>\n<h1 id=\"contact-details\">Contact Details</h1>\n<ul>\n<li>Email: <a href=\"mailto:adi.obilisetty@gmail.com\">adi.obilisetty@gmail.com</a></li>\n<li>Github: <a href=\"https://github.com/adithyaov\">github.com/adithyaov</a></li>\n</ul>\n",
            "author": {
                "name": "Adithya Obilisetty"
            },
            "tags": [
            ],
            "date_published": "2020-07-16T15:22:44+05:30",
            "date_modified": "2020-07-16T15:22:44+05:30"
        }
    ]
}
