<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Adithya</title>
    <link href="https://adithyaov.github.io/feed.xml" rel="self" />
    <link href="https://adithyaov.github.io" />
    <updated>1970-01-01T05:30:00+05:30</updated>
    <author>
        <name>Adithya Obilisetty</name>
    </author>
    <id>https://adithyaov.github.io</id>

    <entry>
        <title>Acyclic graphs in Alga</title>
        <author>
            <name>Adithya Obilisetty</name>
        </author>
        <link href="https://adithyaov.github.io/experimenting-with-acyclic-graphs-in-alga/"/>
        <id>https://adithyaov.github.io/experimenting-with-acyclic-graphs-in-alga/</id>

        <updated>2020-07-16T15:31:54+05:30</updated>
            <summary>
                <![CDATA[
                    Alga is a library for algebraic construction and manipulation of graphs in Haskell. Seethis Haskell Symposium paper and thecorresponding talk for the motivationbehind the library, the underlying theory and implementation details. There is also aHaskell eXchange talk, and a tutorial by Alexandre Moine.Please visit the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><strong>Alga</strong> is a library for algebraic construction and manipulation of graphs in Haskell. See
<a href="https://github.com/snowleopard/alga-paper">this Haskell Symposium paper</a> and the
corresponding <a href="https://www.youtube.com/watch?v=EdQGLewU-8k">talk</a> for the motivation
behind the library, the underlying theory and implementation details. There is also a
<a href="https://skillsmatter.com/skillscasts/10635-algebraic-graphs">Haskell eXchange talk</a>, 
and a <a href="https://nobrakal.github.io/alga-tutorial">tutorial</a> by Alexandre Moine.
Please visit the <a href="https://github.com/snowleopard/alga/wiki">wiki</a> for more information.</p>
<h1 id="motivation-behind-acyclic-graphs">Motivation behind acyclic graphs</h1>
<p>The basic idea is that the user should be able to use acyclic graphs without
many restrictions. Ideally the user should not be able to compile programs
that result in an acyclic graph. The avenue of a strict type safe acyclic graphs
was explored but due to the limitations of type system this was not possible.</p>
<p>Acyclic graphs are both common and heavily used in dependency
management. This is demonstrated in the section 
<strong>Construction from algebraic graph and a partial order</strong> but unfortunately
even this is removed from the final draft due to being unsafe.</p>
<p>It would also makes it easier to work with algorithms like <code>scc</code> or <code>topSort</code>
as has been remarked in <a href="https://github.com/snowleopard/alga/issues/152">some</a>
<a href="https://github.com/snowleopard/alga/issues/154">issues</a>.</p>
<h1 id="construction-methods">Construction methods</h1>
<p>Below are a few ways one could construct an acyclic graph. In the <a href="Acyclic.AdjacencyMap">final draft</a>
few construction methods have been removed for being unsafe.</p>
<h2 id="scc-algorithm">SCC algorithm</h2>
<p>One straightforward way to construct an acyclic graph was by using
the SCC algorithm. We all know that a graph of SCC is acyclic and
hence can be used to construct acyclic graphs.</p>
<p>The following is the signature for <code>scc</code> in Alga,</p>
<pre><code>scc :: Ord a =&gt; AdjacencyMap a -&gt; Acyclic.AdjacencyMap (NonEmpty.AdjacencyMap a)</code></pre><h2 id="construction-from-algebraic-graph-and-a-partial-order">Construction from algebraic graph and a partial order</h2>
<p>The basic idea of this kind of construction is that if the edges are
restricted on the basis of ordering of the elements then it is
impossible to construct a back edge and hence it is impossible to
construct an acyclic graph. This order can be visualized as somewhat
similar to the topological sorting itself.</p>
<pre><code>import Algebra.Graph (Graph)

type PartialOrder a = a -&gt; a -&gt; Bool

fromGraph :: Ord a =&gt; PartialOrder a -&gt; Graph a -&gt; Acyclic.AdjacencyMap a</code></pre><p>Example (The following is similar to dependency management):</p>
<p>Here is a simple example where we do have a partial order in advance:</p>
<ul>
<li>Every object file depends only on C source files: <code>file.c</code> &lt; <code>file.o</code>.</li>
<li>Every executable depends only on object files: <code>file.o</code> &lt; <code>file.exe</code>.</li>
</ul>
<p>Here we could just use <code>&lt;</code> from the derived <code>Ord</code> instance for the extension data type:</p>
<pre><code>data Extension = C | O | Exe deriving (Eq, Ord)

type File = (FilePath, Extension)

partialOrder :: PartialOrder File
partialOrder (_, x) (_, y) = x &lt; y</code></pre><p>The problem with this is the fact that the construction of the acyclic
graph is dependent on the partial order provided. One could potentially
make cyclic graphs given an improper partial order such as,
<code>partialOrder _ _ = True</code>. It is not possible to restrict the user to
use a <strong>strict partial order</strong> and hence is removed from the <a href="https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap.hs">final draft</a>.</p>
<p>One could also create an evil <code>Ord</code> instance which might lead to the
creation of an inconsistent acyclic graph (or maybe even an
inconsistent graph itself). This, being an extreme case, is ignored.</p>
<h1 id="the-ord-module">The Ord module</h1>
<p><a href="https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap/Ord.hs">Algebra.Graph.Acyclic.AdjacencyMap.Ord</a> is
created for the completeness of <a href="https://github.com/snowleopard/alga/blob/master/src/Algebra/Graph/Acyclic/AdjacencyMap.hs">Algebra.Graph.Acyclic.AdjacencyMap</a>.
As mentioned earlier, ease of use is an important motivation for the library.
The <code>Ord</code> module makes it easier to use acyclic graphs by providing operators like
<code>connect</code>, <code>overlay</code>, etc.</p>
<p>This module highly depends on the <code>Ord</code> instance of the vertices.
Every operation in this module makes sure that for any 2 vertices
<code>x</code> and <code>y</code> in the graph, an edge can exist between <code>x</code> and <code>y</code> if
and only if <code>x &lt; y</code>. This is similar to the partial order construction
method but uses the <code>Ord</code> instance of the element itself.</p>
<h1 id="the-shrink-operator">The Shrink Operator</h1>
<p>An amazing observation made by <a href="https://github.com/snowleopard">Andrey Mokhov</a>
was that one can use <code>scc</code> to create a method of acyclic graph
construction which is safe and complete.</p>
<p>We can define <code>shrink</code> as,</p>
<pre><code>shrink :: AdjacencyMap a -&gt; Acyclic.AdjacencyMap a
shrink am = AAM (Map.map (NonEmpty.head . NonEmpty.vertexList1) aam)
  where
    AAM aam = scc am </code></pre><p>One could potentially replace <code>Ord</code> instance completely with <code>shrink</code>
operations. This has been demonstrated in <a href="https://gist.github.com/adithyaov/bf3bf5d595bc1bb587d0aea03f1b3412">this gist</a>.</p>
<p>Unfortunately, with the current implementation of <code>shrink</code>,
few important mathematical properties will be broken. 
For example, as Andrey Mokhov pointed out,</p>
<p>If we define <code>x == y</code> as <code>shrink x == shrink y</code>.
Then <code>edge 1 2 + edge 2 1 == vertex 1</code> but one cannot replace
<code>vertex 1</code> with <code>edge 1 2</code> in an expression without changing its
meaning. Because <code>vertex 1 + edge 2 3</code> will suddenly become 
<code>edge 1 2 + edge 2 1 + edge 2 3</code> which is equal to <code>edge 1 3</code>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Although the <code>Ord</code> module makes it easier to work with acyclic graphs,
it is not complete.
<code>shrink</code> is a beautiful and a powerful operator which provides a
safe and a complete way to construct acyclic graphs. But it cannot
be used with the current implementation due to its side effects
on basic algebraic properties. Coming up with a proper implementation
of <code>shrink</code> would increase the usability and effectiveness of the
library. A proper implementation of <code>shrink</code> would replace the <code>Ord</code>
module and many other functions completely.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>About me</title>
        <author>
            <name>Adithya Obilisetty</name>
        </author>
        <link href="https://adithyaov.github.io/about-me/"/>
        <id>https://adithyaov.github.io/about-me/</id>

        <updated>2020-07-16T15:31:54+05:30</updated>
            <summary>
                <![CDATA[
                    Hi, I’m Adithya. I currently work for a company called Composewell where I build tooling surrounding the Haskell ecosystem. Before that, I studied Computer Science at Indian Institute of Technology, Palakkad. I am interested in Functional programming and Mathematics, hence I have a natural predilection&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Hi, I’m Adithya. I currently work for a company called Composewell where I build tooling surrounding the Haskell ecosystem. Before that, I studied Computer Science at <a href="https://iitpkd.ac.in/">Indian Institute of Technology, Palakkad</a>.</p>
<p>I am interested in Functional programming and Mathematics, hence I have a natural predilection towards Haskell. I contribute to the Open Source community whenever possible. I use Emacs for almost everything and prefer Z shell (with oh-my-zsh) over Bash.</p>
<p>Apart from that, I regularly play chess, although I’m not very good at it.</p>
<h1 id="research-interests">Research Interests</h1>
<p>My researches interests mostly lie in the field of math and programming languages. They include <em>Cryptography</em>, <em>Category Theory</em>, <em>Type Theory</em> and <em>Proof Assistants</em>. </p>
<p>If you’d like to work with me or ask me something, please don’t hesitate to mail me at <a href="mailto:adi.obilisetty@gmail.com">adi.obilisetty@gmail.com</a></p>

            ]]>
        </content>
    </entry>
</feed>
